# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import heliosauth.jsonfield
import helios.datatypes
import helios.datatypes.djangofield
import zeus.model_features
import helios.byte_fields
import django.core.files.storage
import helios.models


class Migration(migrations.Migration):

    dependencies = [
        ('zeus', '0001_initial'),
        ('heliosauth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuditedBallot',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('raw_vote', models.TextField()),
                ('vote_hash', models.CharField(max_length=100)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('fingerprint', models.CharField(max_length=255)),
                ('audit_code', models.CharField(max_length=100)),
                ('is_request', models.BooleanField(default=True)),
                ('signature', heliosauth.jsonfield.JSONField(null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CastVote',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('previous', models.CharField(default=b'', max_length=255)),
                ('vote', helios.datatypes.djangofield.LDObjectField()),
                ('vote_hash', models.CharField(max_length=100)),
                ('vote_tinyhash', models.CharField(max_length=50, unique=True, null=True)),
                ('cast_at', models.DateTimeField(auto_now_add=True)),
                ('audit_code', models.CharField(max_length=100, null=True)),
                ('quarantined_p', models.BooleanField(default=False)),
                ('released_from_quarantine_at', models.DateTimeField(null=True)),
                ('verified_at', models.DateTimeField(null=True)),
                ('invalidated_at', models.DateTimeField(null=True)),
                ('fingerprint', models.CharField(max_length=255)),
                ('signature', heliosauth.jsonfield.JSONField(null=True)),
                ('index', models.PositiveIntegerField(null=True)),
            ],
            options={
                'ordering': ('-cast_at',),
            },
            bases=(models.Model, helios.datatypes.LDObjectContainer),
        ),
        migrations.CreateModel(
            name='Election',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('compute_results_started_at', models.DateTimeField(default=None, null=True)),
                ('compute_results_finished_at', models.DateTimeField(default=None, null=True)),
                ('compute_results_status', models.CharField(default=b'pending', max_length=50)),
                ('compute_results_error', models.TextField(default=None, null=True)),
                ('linked_polls', models.BooleanField(default=False, verbose_name='Linked polls')),
                ('election_module', models.CharField(default=b'simple', help_text='Choose the type of the election', max_length=250, verbose_name='Election type', choices=[(b'simple', 'Simple election with one or more questions'), (b'parties', 'Party lists election'), (b'score', 'Score voting election'), (b'stv', 'Single transferable vote election')])),
                ('version', models.CharField(default=1, max_length=255)),
                ('uuid', models.CharField(max_length=50)),
                ('name', models.CharField(help_text='Election name', max_length=255, verbose_name='Election name')),
                ('short_name', models.CharField(max_length=255)),
                ('communication_language', models.CharField(max_length=5, null=True, verbose_name=b'')),
                ('help_email', models.CharField(help_text='Voters can contact this email for election support', max_length=254, null=True, verbose_name='Support email', blank=True)),
                ('help_phone', models.CharField(help_text='Voters can contact this phone for election support', max_length=254, null=True, verbose_name='Support phone', blank=True)),
                ('description', models.TextField(help_text='Election description', verbose_name='Election description')),
                ('trial', models.BooleanField(default=False, help_text='This is a trial election', verbose_name='Trial election')),
                ('public_key', helios.datatypes.djangofield.LDObjectField(null=True)),
                ('private_key', helios.datatypes.djangofield.LDObjectField(null=True)),
                ('departments', models.TextField(help_text='University Schools. e.g.<br/><br/> School of Engineering <br />School of Medicine<br />School ofInformatics<br />', null=True, verbose_name='Departments')),
                ('mix_key', models.CharField(default=None, max_length=50, null=True)),
                ('remote_mixing_finished_at', models.DateTimeField(default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('canceled_at', models.DateTimeField(default=None, null=True)),
                ('cancelation_reason', models.TextField(default=b'')),
                ('completed_at', models.DateTimeField(default=None, null=True)),
                ('deleted', models.BooleanField(default=False)),
                ('frozen_at', models.DateTimeField(default=None, null=True)),
                ('voting_starts_at', models.DateTimeField(default=helios.models._default_voting_starts_at, help_text='When voting starts', null=True, verbose_name='Voting starts at')),
                ('voting_ends_at', models.DateTimeField(default=helios.models._default_voting_ends_at, help_text='When voting ends', null=True, verbose_name='Voting ends at')),
                ('voting_extended_until', models.DateTimeField(default=None, help_text='Voting extension date', null=True, verbose_name='Voting extended until', blank=True)),
                ('voting_ended_at', models.DateTimeField(default=None, null=True)),
                ('archived_at', models.DateTimeField(default=None, null=True)),
                ('official', models.IntegerField(default=None, null=True, choices=[(None, 'Unresolved'), (0, 'Unofficial'), (1, 'Official')])),
                ('admins', models.ManyToManyField(related_name='elections', to='heliosauth.User')),
                ('institution', models.ForeignKey(to='zeus.Institution', null=True)),
            ],
            options={
                'ordering': ('-created_at',),
            },
            bases=(models.Model, helios.datatypes.LDObjectContainer, zeus.model_features.ElectionFeatures),
        ),
        migrations.CreateModel(
            name='ElectionLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('log', models.CharField(max_length=500)),
                ('at', models.DateTimeField(auto_now_add=True)),
                ('election', models.ForeignKey(to='helios.Election')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MixPart',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('data', models.BinaryField(default=None, null=True, blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('validate_voting_started_at', models.DateTimeField(default=None, null=True)),
                ('validate_voting_finished_at', models.DateTimeField(default=None, null=True)),
                ('validate_voting_status', models.CharField(default=b'pending', max_length=50)),
                ('validate_voting_error', models.TextField(default=None, null=True)),
                ('compute_results_started_at', models.DateTimeField(default=None, null=True)),
                ('compute_results_finished_at', models.DateTimeField(default=None, null=True)),
                ('compute_results_status', models.CharField(default=b'pending', max_length=50)),
                ('compute_results_error', models.TextField(default=None, null=True)),
                ('partial_decrypt_started_at', models.DateTimeField(default=None, null=True)),
                ('partial_decrypt_finished_at', models.DateTimeField(default=None, null=True)),
                ('partial_decrypt_status', models.CharField(default=b'pending', max_length=50)),
                ('partial_decrypt_error', models.TextField(default=None, null=True)),
                ('decrypt_started_at', models.DateTimeField(default=None, null=True)),
                ('decrypt_finished_at', models.DateTimeField(default=None, null=True)),
                ('decrypt_status', models.CharField(default=b'pending', max_length=50)),
                ('decrypt_error', models.TextField(default=None, null=True)),
                ('zeus_partial_decrypt_started_at', models.DateTimeField(default=None, null=True)),
                ('zeus_partial_decrypt_finished_at', models.DateTimeField(default=None, null=True)),
                ('zeus_partial_decrypt_status', models.CharField(default=b'pending', max_length=50)),
                ('zeus_partial_decrypt_error', models.TextField(default=None, null=True)),
                ('validate_mixing_started_at', models.DateTimeField(default=None, null=True)),
                ('validate_mixing_finished_at', models.DateTimeField(default=None, null=True)),
                ('validate_mixing_status', models.CharField(default=b'pending', max_length=50)),
                ('validate_mixing_error', models.TextField(default=None, null=True)),
                ('mix_started_at', models.DateTimeField(default=None, null=True)),
                ('mix_finished_at', models.DateTimeField(default=None, null=True)),
                ('mix_status', models.CharField(default=b'pending', max_length=50)),
                ('mix_error', models.TextField(default=None, null=True)),
                ('validate_create_started_at', models.DateTimeField(default=None, null=True)),
                ('validate_create_finished_at', models.DateTimeField(default=None, null=True)),
                ('validate_create_status', models.CharField(default=b'pending', max_length=50)),
                ('validate_create_error', models.TextField(default=None, null=True)),
                ('link_id', models.CharField(default=b'', max_length=255, verbose_name='Poll link group')),
                ('linked_ref', models.CharField(default=b'', max_length=255, verbose_name='Poll reference id')),
                ('name', models.CharField(max_length=255, verbose_name='Poll name')),
                ('short_name', models.CharField(max_length=255)),
                ('uuid', models.CharField(unique=True, max_length=50, db_index=True)),
                ('zeus_fingerprint', models.TextField(default=None, null=True)),
                ('frozen_at', models.DateTimeField(default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('questions', helios.datatypes.djangofield.LDObjectField(null=True)),
                ('questions_data', heliosauth.jsonfield.JSONField(null=True)),
                ('encrypted_tally', helios.datatypes.djangofield.LDObjectField(null=True)),
                ('result', helios.datatypes.djangofield.LDObjectField(null=True)),
                ('stv_results', heliosauth.jsonfield.JSONField(null=True)),
                ('eligibles_count', models.PositiveIntegerField(default=5)),
                ('has_department_limit', models.BooleanField(default=0)),
                ('department_limit', models.PositiveIntegerField(default=0)),
                ('voters_last_notified_at', models.DateTimeField(default=None, null=True)),
                ('index', models.PositiveIntegerField(default=1)),
                ('oauth2_thirdparty', models.BooleanField(default=False, verbose_name='Oauth2 login')),
                ('oauth2_type', models.CharField(max_length=25, null=True, blank=True)),
                ('oauth2_client_type', models.CharField(max_length=25, null=True, blank=True)),
                ('oauth2_client_id', models.CharField(max_length=255, null=True, blank=True)),
                ('oauth2_client_secret', models.CharField(max_length=255, null=True, blank=True)),
                ('oauth2_code_url', models.CharField(max_length=255, null=True, blank=True)),
                ('oauth2_exchange_url', models.CharField(max_length=255, null=True, blank=True)),
                ('oauth2_confirmation_url', models.CharField(max_length=255, null=True, blank=True)),
                ('oauth2_extra', models.CharField(max_length=255, null=True, blank=True)),
                ('jwt_auth', models.BooleanField(default=False, verbose_name='JWT login')),
                ('jwt_public_key', models.TextField(default=None, null=True)),
                ('jwt_issuer', models.CharField(max_length=255, null=True, blank=True)),
                ('shibboleth_auth', models.BooleanField(default=False, verbose_name='Shibboleth login')),
                ('shibboleth_constraints', heliosauth.jsonfield.JSONField(default=None, null=True, blank=True)),
                ('election', models.ForeignKey(related_name='polls', to='helios.Election')),
            ],
            options={
                'ordering': ('link_id', 'index', 'created_at'),
            },
            bases=(models.Model, helios.datatypes.LDObjectContainer, zeus.model_features.PollFeatures),
        ),
        migrations.CreateModel(
            name='PollMix',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(default=b'Zeus mixnet', max_length=255)),
                ('mix_type', models.CharField(default=b'local', max_length=255, choices=[(b'local', b'Local'), (b'remote', b'Remote')])),
                ('mix_order', models.PositiveIntegerField(default=0)),
                ('remote_ip', models.CharField(max_length=255, null=True, blank=True)),
                ('remote_protocol', models.CharField(default=b'zeus_client', max_length=255, choices=[(b'helios', b'Helios'), (b'verificatum', b'Verificatum'), (b'zeus_client', b'Zeus server')])),
                ('mixing_started_at', models.DateTimeField(null=True)),
                ('mixing_finished_at', models.DateTimeField(null=True)),
                ('status', models.CharField(default=b'pending', max_length=255, choices=[(b'pending', b'Pending'), (b'mixing', b'Mixing'), (b'validating', b'Validating'), (b'error', b'Error'), (b'finished', b'Finished')])),
                ('mix_error', models.TextField(null=True, blank=True)),
                ('mix_file', models.FileField(default=None, storage=django.core.files.storage.FileSystemStorage(location=b'/srv/zeus-data/media/zeus_mixes/'), null=True, upload_to=helios.models.dummy_upload_to)),
                ('poll', models.ForeignKey(related_name='mixes', to='helios.Poll')),
            ],
            options={
                'ordering': ['-mix_order'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Trustee',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('uuid', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=75)),
                ('secret', models.CharField(max_length=100)),
                ('public_key', helios.datatypes.djangofield.LDObjectField(null=True)),
                ('public_key_hash', models.CharField(max_length=100)),
                ('secret_key', helios.datatypes.djangofield.LDObjectField(null=True)),
                ('pok', helios.datatypes.djangofield.LDObjectField(null=True)),
                ('last_verified_key_at', models.DateTimeField(null=True)),
                ('last_notified_at', models.DateTimeField(default=None, null=True)),
                ('election', models.ForeignKey(related_name='trustees', to='helios.Election')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, helios.datatypes.LDObjectContainer, zeus.model_features.TrusteeFeatures),
        ),
        migrations.CreateModel(
            name='TrusteeDecryptionFactors',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('decryption_factors', helios.datatypes.djangofield.LDObjectField(null=True)),
                ('decryption_proofs', helios.datatypes.djangofield.LDObjectField(null=True)),
                ('poll', models.ForeignKey(related_name='partial_decryptions', to='helios.Poll')),
                ('trustee', models.ForeignKey(related_name='partial_decryptions', to='helios.Trustee')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Voter',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('uuid', models.CharField(max_length=50)),
                ('voter_login_id', models.CharField(max_length=100, null=True)),
                ('voter_password', models.CharField(max_length=100, null=True)),
                ('voter_name', models.CharField(max_length=200, null=True)),
                ('voter_surname', models.CharField(max_length=200, null=True)),
                ('voter_email', models.CharField(max_length=250, null=True)),
                ('voter_fathername', models.CharField(max_length=250, null=True)),
                ('voter_mobile', models.CharField(max_length=48, null=True)),
                ('voter_weight', models.PositiveIntegerField(default=1)),
                ('alias', models.CharField(max_length=100, null=True)),
                ('vote', helios.datatypes.djangofield.LDObjectField(null=True)),
                ('vote_hash', models.CharField(max_length=100, null=True)),
                ('vote_fingerprint', models.CharField(max_length=255)),
                ('vote_signature', models.TextField()),
                ('vote_index', models.PositiveIntegerField(null=True)),
                ('cast_at', models.DateTimeField(null=True)),
                ('audit_passwords', models.CharField(max_length=200, null=True)),
                ('last_sms_send_at', models.DateTimeField(null=True)),
                ('last_sms_code', models.CharField(max_length=100, null=True, blank=True)),
                ('last_sms_status', models.CharField(max_length=100, null=True, blank=True)),
                ('last_email_send_at', models.DateTimeField(null=True)),
                ('last_booth_invitation_send_at', models.DateTimeField(null=True)),
                ('last_visit', models.DateTimeField(null=True)),
                ('excluded_at', models.DateTimeField(default=None, null=True)),
                ('exclude_reason', models.TextField(default=b'')),
                ('poll', models.ForeignKey(related_name='voters', to='helios.Poll')),
            ],
            options={
            },
            bases=(models.Model, helios.datatypes.LDObjectContainer, zeus.model_features.VoterFeatures),
        ),
        migrations.CreateModel(
            name='VoterFile',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('voter_file', models.FileField(max_length=250, null=True, upload_to=b'voters/%Y/%m/%d')),
                ('voter_file_content', models.TextField(null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('processing_started_at', models.DateTimeField(null=True)),
                ('processing_finished_at', models.DateTimeField(null=True)),
                ('num_voters', models.IntegerField(null=True)),
                ('poll', models.ForeignKey(to='helios.Poll')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='voter',
            unique_together=set([('poll', 'voter_login_id'), ('poll', 'voter_password')]),
        ),
        migrations.AlterUniqueTogether(
            name='trusteedecryptionfactors',
            unique_together=set([('trustee', 'poll')]),
        ),
        migrations.AlterUniqueTogether(
            name='pollmix',
            unique_together=set([('poll', 'mix_order')]),
        ),
        migrations.AlterUniqueTogether(
            name='poll',
            unique_together=set([('name', 'election')]),
        ),
        migrations.AddField(
            model_name='mixpart',
            name='mix',
            field=models.ForeignKey(related_name='parts', to='helios.PollMix'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='castvote',
            name='poll',
            field=models.ForeignKey(related_name='cast_votes', to='helios.Poll'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='castvote',
            name='voter',
            field=models.ForeignKey(related_name='cast_votes', to='helios.Voter'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='castvote',
            unique_together=set([('poll', 'index')]),
        ),
        migrations.AddField(
            model_name='auditedballot',
            name='poll',
            field=models.ForeignKey(related_name='audited_ballots', to='helios.Poll'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='auditedballot',
            name='voter',
            field=models.ForeignKey(to='helios.Voter', null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='auditedballot',
            unique_together=set([('poll', 'is_request', 'fingerprint')]),
        ),
    ]
